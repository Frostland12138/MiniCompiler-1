%{
#include <stdio.h>
#include <memory>
#include "ast/ast.h"
#include "lib/json/json.h"

#define YYSTYPE std::shared_ptr<ast::Node>
extern int yylex(void);
void yyerror(const char *);



%}
%token IDENTIFIER CONSTANT_INT CONSTANT_FLOAT STRING_LITERAL SIZEOF
%token PTR_OP INC_OP DEC_OP LEFT_OP RIGHT_OP LE_OP GE_OP EQ_OP NE_OP
%token AND_OP OR_OP MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN ADD_ASSIGN
%token SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN
%token XOR_ASSIGN OR_ASSIGN TYPE_NAME

%token TYPEDEF EXTERN STATIC AUTO REGISTER
%token CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOLATILE VOID
%token STRUCT UNION ENUM ELLIPSIS

%token CASE DEFAULT IF ELSE SWITCH WHILE DO FOR GOTO CONTINUE BREAK RETURN

%nonassoc IFX 
%nonassoc ELSE

%start program
%%

program
	: translation_unit	{
			Json::StyledStreamWriter writer(" ");
			writer.write(std::cout, ast::exports($1));
		}
	;

primary_expression
	: IDENTIFIER
	| CONSTANT_INT	{
			$$ = std::make_shared<ast::Node>("primary_expression", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
		}
	| CONSTANT_FLOAT
	| STRING_LITERAL
	| '(' expression ')'
	;

postfix_expression
	: primary_expression	{
	  		$$ = $1;
		}
	| postfix_expression '[' expression ']'	{
	  		
	  	}
	| postfix_expression '(' ')'
	| postfix_expression '(' argument_expression_list ')'
	| postfix_expression '.' IDENTIFIER
	| postfix_expression PTR_OP IDENTIFIER
	| postfix_expression INC_OP
	| postfix_expression DEC_OP
	;

argument_expression_list
	: assignment_expression	{
	  	$$ = std::make_shared<ast::Node>("argument_expression_list", $1->get_left(), $1->get_right());
		$$->children.emplace_back($1);
	  }
	| argument_expression_list ',' assignment_expression	{
	  	$$ = $1;
		$$->children.emplace_back($3);
	  }
	;

unary_expression
	: postfix_expression	{
	  		$$ = $1;
		}
	| INC_OP unary_expression	{
	  	 	$$ = std::make_shared<ast::Node>("inc_operator", $1->get_left(), $2->get_right());
			$$->children.emplace_back($2);
	  	 }
	| DEC_OP unary_expression	{
	  	 	$$ = std::make_shared<ast::Node>("dec_operator", $1->get_left(), $2->get_right());
			$$->children.emplace_back($2);
	  	 }
	| unary_operator cast_expression	{
	  		$$ = std::make_shared<ast::Node>("unary_operator", &1->get_left(), $2->get_right());
			$$->children.emplace_back($1);
			$$->children.emplace_back($2);
	  	}
	| SIZEOF unary_expression	{
	  	 	$$ = std::make_shared<ast::Node>("sizeof_operator", $1->get_left(), $2->get_right());
			$$->children.emplace_back($2);
	  	}
	| SIZEOF '(' type_name ')'	{
	  	     	$$ = std::make_shared<ast::Node>("sizeof_operator", $1->get_left(), $4->get_right());
			$$->children.emplace_back($3);
	  	}
	;

unary_operator
	: '&'	{
		$$ = $1;
		$$->type = "unary_operator";
	}
	| '*'	{
		$$ = $1;
		$$->type = "unary_operator";
	}
	| '+'	{
		$$ = $1;
		$$->type = "unary_operator";
	}
	| '-'	{
		$$ = $1;
		$$->type = "unary_operator";
	}
	| '~'	{
		$$ = $1;
		$$->type = "unary_operator";
	}
	| '!'	{
		$$ = $1;
		$$->type = "unary_operator";
	}
	;

cast_expression
	: unary_expression	{
	  	$$ = $1;
	  }
	| '(' type_name ')' cast_expression	{
	      	$$ = std::make_shared<ast::Node>("cast_expression", $2->get_left(), $4->get_right());
		$$->children.emplace_back($2);
		$$->children.emplace_back($4);
	  }
	;

multiplicative_expression
	: cast_expression	{
	  		$$ = $1;
	  }
	| multiplicative_expression '*' cast_expression	{
	  		$$ = std::make_shared<ast::Node>("mul_expression", $1->get_left(), $3->get_right())
			$$->children.emplace_back($1);
			$$->children.emplace_back($3);
	  }
	| multiplicative_expression '/' cast_expression	{
	  		$$ = std::make_shared<ast::Node>("div_expression", $1->get_left(), $3->get_right())
			$$->children.emplace_back($1);
			$$->children.emplace_back($3);
	  }
	| multiplicative_expression '%' cast_expression	{
	  		$$ = std::make_shared<ast::Node>("mod_expression", $1->get_left(), $3->get_right())
			$$->children.emplace_back($1);
			$$->children.emplace_back($3);
	  }
	;

additive_expression
	: multiplicative_expression	{
	  		$$ = $1;
	  }
	| additive_expression '+' multiplicative_expression	{
	  		$$ = std::make_shared<ast::Node>("add_expression", $1->get_left(), $3->get_right())
			$$->children.emplace_back($1);
			$$->children.emplace_back($3);
	  }
	| additive_expression '-' multiplicative_expression	{
	  		$$ = std::make_shared<ast::Node>("sub_expression", $1->get_left(), $3->get_right())
			$$->children.emplace_back($1);
			$$->children.emplace_back($3);
	  }
	;

shift_expression
	: additive_expression	{
	  		$$ = $1;
	  }
	| shift_expression LEFT_OP additive_expression		{
	  		$$ = std::make_shared<ast::Node>("left_shift_expression", $1->get_left(), $3->get_right());
			$$->children.emplace_back($1);
			$$->children.emplace_back($3);
	  }
	| shift_expression RIGHT_OP additive_expression	{
	  		$$ = std::make_shared<ast::Node>("right_shift_expression", $1->get_left(), $3->get_right());
			$$->children.emplace_back($1);
			$$->children.emplace_back($3);
	  }
	;

relational_expression
	: shift_expression	{
	  		$$ = $1;
	  }
	| relational_expression '<' shift_expression	{
	  		$$ = std::make_shared<ast::Node>("lt_expression", $1->get_left(), $3->get_right());
			$$->children.emplace_back($1);
			$$->children.emplace_back($3);
	  }
	| relational_expression '>' shift_expression	{
	  		$$ = std::make_shared<ast::Node>("gt_expression", $1->get_left(), $3->get_right());
			$$->children.emplace_back($1);
			$$->children.emplace_back($3);
	  }
	| relational_expression LE_OP shift_expression	{
	  		$$ = std::make_shared<ast::Node>("le_expression", $1->get_left(), $3->get_right());
			$$->children.emplace_back($1);
			$$->children.emplace_back($3);
	  }
	| relational_expression GE_OP shift_expression	{
	  		$$ = std::make_shared<ast::Node>("ge_expression", $1->get_left(), $3->get_right());
			$$->children.emplace_back($1);
			$$->children.emplace_back($3);
	  }
	;

equality_expression
	: relational_expression	{
	  		$$ = $1;
	  }
	| equality_expression EQ_OP relational_expression	{
	  		$$ = std::make_shared<ast::Node>("equality_expression", $1->get_left(), $3->get_right());
			$$->children.emplace_back($1);
			$$->children.emplace_back($3);
	  }
	| equality_expression NE_OP relational_expression	{
	  		$$ = std::make_shared<ast::Node>("not_equality_expression", $1->get_left(), $3->get_right());
			$$->children.emplace_back($1);
			$$->children.emplace_back($3);
	  }
	;

and_expression
	: equality_expression	{
	  		$$ = $1;
	  	}
	| and_expression '&' equality_expression	{
	  		$$ = std::make_shared<ast::Node>("and_expression", $1->get_left(), $3->get_right());
			$$->children.emplace_back($1);
			$$->children.emplace_back($3);
	  	}
	;

exclusive_or_expression
	: and_expression		{
	  		$$ = $1;
	  	}
	| exclusive_or_expression '^' and_expression	{
	  		$$ = std::make_shared<ast::Node>("exclusive_or_expression", $1->get_left(), $3->get_right());
			$$->children.emplace_back($1);
			$$->children.emplace_back($3);
	  	}
	;

inclusive_or_expression
	: exclusive_or_expression	{
	  		$$ = $1;
	  	}
	| inclusive_or_expression '|' exclusive_or_expression	{
	  		$$ = std::make_shared<ast::Node>("inclusive_or_expression", $1->get_left(), $3->get_right());
			$$->children.emplace_back($1);
			$$->children.emplace_back($3);
	  	}
	;

logical_and_expression
	: inclusive_or_expression	{
	  		$$ = $1;
	  	}
	| logical_and_expression AND_OP inclusive_or_expression	{
	  		$$ = std::make_shared<ast::Node>("logical_and_expression", $1->get_left(), $3->get_right());
			$$->children.emplace_back($1);
			$$->children.emplace_back($3);
	  	}
	;

logical_or_expression
	: logical_and_expression	{
	  		$$ = $1;
	  	}
	| logical_or_expression OR_OP logical_and_expression	{
	  		$$ = std::make_shared<ast::Node>("logical_or_expression", $1->get_left(), $3->get_right());
			$$->children.emplace_back($1);
			$$->children.emplace_back($3);
	  	}
	;

conditional_expression
	: logical_or_expression		{
	  		$$ = $1;
	  	}
	| logical_or_expression '?' expression ':' conditional_expression
	;

assignment_expression
	: conditional_expression	{
	  		$$ = $1;
	  	}
	| unary_expression assignment_operator assignment_expression	{
			$$ = std::make_shared<ast::Node>("assignment_expression", $1->get_left(), $3->get_right());
			$$->children.emplace_back($1);
			$$->children.emplace_back($2);
			$$->children.emplace_back($3);
		}
	;

assignment_operator
	: '='	{
	  	$$ = std::make_shared<ast::Node>("assignment_operator", $1->get_left(), $1->get_right());
		$$->children.emplace_back($1);
	  }
	| MUL_ASSIGN	{
	  	$$ = std::make_shared<ast::Node>("assignment_operator", $1->get_left(), $1->get_right());
		$$->children.emplace_back($1);
	  }
	| DIV_ASSIGN	{
	  	$$ = std::make_shared<ast::Node>("assignment_operator", $1->get_left(), $1->get_right());
		$$->children.emplace_back($1);
	  }
	| MOD_ASSIGN	{
	  	$$ = std::make_shared<ast::Node>("assignment_operator", $1->get_left(), $1->get_right());
		$$->children.emplace_back($1);
	  }
	| ADD_ASSIGN	{
	  	$$ = std::make_shared<ast::Node>("assignment_operator", $1->get_left(), $1->get_right());
		$$->children.emplace_back($1);
	  }
	| SUB_ASSIGN	{
	  	$$ = std::make_shared<ast::Node>("assignment_operator", $1->get_left(), $1->get_right());
		$$->children.emplace_back($1);
	  }
	| LEFT_ASSIGN	{
	  	$$ = std::make_shared<ast::Node>("assignment_operator", $1->get_left(), $1->get_right());
		$$->children.emplace_back($1);
	  }
	| RIGHT_ASSIGN	{
	  	$$ = std::make_shared<ast::Node>("assignment_operator", $1->get_left(), $1->get_right());
		$$->children.emplace_back($1);
	  }
	| AND_ASSIGN	{
	  	$$ = std::make_shared<ast::Node>("assignment_operator", $1->get_left(), $1->get_right());
		$$->children.emplace_back($1);
	  }
	| XOR_ASSIGN	{
	  	$$ = std::make_shared<ast::Node>("assignment_operator", $1->get_left(), $1->get_right());
		$$->children.emplace_back($1);
	  }
	| OR_ASSIGN	{
	  	$$ = std::make_shared<ast::Node>("assignment_operator", $1->get_left(), $1->get_right());
		$$->children.emplace_back($1);
	  }
	;

expression
	: assignment_expression	{
			$$ = std::make_shared<ast::Node>("expression", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
		}
	| expression ',' assignment_expression
	;

constant_expression
	: conditional_expression
	;

declaration
	: declaration_specifiers ';'
	| declaration_specifiers init_declarator_list ';'
	;

declaration_specifiers
	: storage_class_specifier
	| storage_class_specifier declaration_specifiers
	| type_specifier	{
			$$ = std::make_shared<ast::Node>("declaration_specifiers", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
		}
	| type_specifier declaration_specifiers
	| type_qualifier
	| type_qualifier declaration_specifiers
	;

init_declarator_list
	: init_declarator
	| init_declarator_list ',' init_declarator
	;

init_declarator
	: declarator
	| declarator '=' initializer
	;

storage_class_specifier
	: TYPEDEF
	| EXTERN
	| STATIC
	| AUTO
	| REGISTER
	;

type_specifier
	: VOID	{
			$$ = std::make_shared<ast::Node>("type_specifier", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
		}
	| CHAR	{
			$$ = std::make_shared<ast::Node>("type_specifier", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
		}
	| SHORT	{
			$$ = std::make_shared<ast::Node>("type_specifier", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
		}
	| INT	{
			$$ = std::make_shared<ast::Node>("type_specifier", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
		}
	| LONG	{
			$$ = std::make_shared<ast::Node>("type_specifier", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
		}
	| FLOAT	{
			$$ = std::make_shared<ast::Node>("type_specifier", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
		}
	| DOUBLE	{
			$$ = std::make_shared<ast::Node>("type_specifier", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
		}
	| SIGNED	{
			$$ = std::make_shared<ast::Node>("type_specifier", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
		}
	| UNSIGNED	{
			$$ = std::make_shared<ast::Node>("type_specifier", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
		}
	| struct_or_union_specifier	{
			$$ = std::make_shared<ast::Node>("type_specifier", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
		}
	| enum_specifier	{
			$$ = std::make_shared<ast::Node>("type_specifier", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
		}
	| TYPE_NAME	{
			$$ = std::make_shared<ast::Node>("type_specifier", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
		}
	;

struct_or_union_specifier
	: struct_or_union IDENTIFIER '{' struct_declaration_list '}'
	| struct_or_union '{' struct_declaration_list '}'
	| struct_or_union IDENTIFIER
	;

struct_or_union
	: STRUCT
	| UNION
	;

struct_declaration_list
	: struct_declaration
	| struct_declaration_list struct_declaration
	;

struct_declaration
	: specifier_qualifier_list struct_declarator_list ';'
	;

specifier_qualifier_list
	: type_specifier specifier_qualifier_list
	| type_specifier
	| type_qualifier specifier_qualifier_list
	| type_qualifier
	;

struct_declarator_list
	: struct_declarator
	| struct_declarator_list ',' struct_declarator
	;

struct_declarator
	: declarator
	| ':' constant_expression
	| declarator ':' constant_expression
	;

enum_specifier
	: ENUM '{' enumerator_list '}'
	| ENUM IDENTIFIER '{' enumerator_list '}'
	| ENUM IDENTIFIER
	;

enumerator_list
	: enumerator
	| enumerator_list ',' enumerator
	;

enumerator
	: IDENTIFIER
	| IDENTIFIER '=' constant_expression
	;

type_qualifier
	: CONST
	| VOLATILE
	;

declarator
	: pointer direct_declarator
	| direct_declarator	{
			$$ = std::make_shared<ast::Node>("declarator", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
		}
	;

direct_declarator
	: IDENTIFIER
	| '(' declarator ')'
	| direct_declarator '[' constant_expression ']'
	| direct_declarator '[' ']'
	| direct_declarator '(' parameter_type_list ')'	{
			$$ = std::make_shared<ast::Node>("direct_declarator", $1->get_left(), $4->get_right());
			$$->children.emplace_back($1);
			$$->children.emplace_back($3);
		}
	| direct_declarator '(' identifier_list ')'
	| direct_declarator '(' ')'
	;

pointer
	: '*'
	| '*' type_qualifier_list
	| '*' pointer
	| '*' type_qualifier_list pointer
	;

type_qualifier_list
	: type_qualifier
	| type_qualifier_list type_qualifier
	;


parameter_type_list
	: parameter_list	{
			$$ = std::make_shared<ast::Node>("parameter_type_list", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
		}
	| parameter_list ',' ELLIPSIS
	;

parameter_list
	: parameter_declaration	{
			$$ = std::make_shared<ast::Node>("parameter_list", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
		}
	| parameter_list ',' parameter_declaration
	;

parameter_declaration
	: declaration_specifiers declarator
	| declaration_specifiers abstract_declarator
	| declaration_specifiers	{
			$$ = std::make_shared<ast::Node>("parameter_declaration", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
		}
	;

identifier_list
	: IDENTIFIER	{
	  		$$ = std::make_shared<ast::Node>("identifier_list", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
	  }
	| identifier_list ',' IDENTIFIER	{
	  		  $$ = $1;
			  $$->children.emplace_back($3);
	  }
	;

type_name
	: specifier_qualifier_list
	| specifier_qualifier_list abstract_declarator
	;

abstract_declarator
	: pointer
	| direct_abstract_declarator
	| pointer direct_abstract_declarator
	;

direct_abstract_declarator
	: '(' abstract_declarator ')'
	| '[' ']'
	| '[' constant_expression ']'
	| direct_abstract_declarator '[' ']'
	| direct_abstract_declarator '[' constant_expression ']'
	| '(' ')'
	| '(' parameter_type_list ')'
	| direct_abstract_declarator '(' ')'
	| direct_abstract_declarator '(' parameter_type_list ')'
	;

initializer
	: assignment_expression	{
	  	$$ = $1;
	  }
	| '{' initializer_list '}'	{
	      $$ = $2;
	  }
	| '{' initializer_list ',' '}'	{
	      $$ = $2;
	  }
	;

initializer_list
	: initializer	{
	  		$$ = std::make_shared<ast::Node>("initializer_list", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
	  	}
	| initializer_list ',' initializer	{
	  		$$ = $1;
			$1->children.emplace_back($3);
	  	}
	;

statement
	: labeled_statement	{
	  		$$ = $1;
		}
	| compound_statement	{
	  		$$ = $1;
		}
	| expression_statement	{
	  		$$ = $1;
		}
	| selection_statement	{
	  		$$ = $1;
		}
	| iteration_statement	{
	  		$$ = $1;
		}
	| jump_statement	{
	  		$$ = $1;
		}
	;

labeled_statement
	: CASE constant_expression ':' statement	{
	       $$ = std::make_shared<ast::Node>("case_statement", $1->get_left(), $4->get_right());
	       $$->children.emplace_back($2);
	       $$->children.emplace_back($4);
	  }
	| DEFAULT ':' statement	{
	       $$ = std::make_shared<ast::Node>("default_statement", $1->get_left(), $3->get_right());
	       $$->children.emplace_back($3);
	  }
	;

compound_statement
	: '{' '}'	{
	      $$ = std::make_shared<ast::Node>("compound_statement", $1->get_left(), $2->get_right());
	  }
	| '{' statement_list '}'	{
			$$ = std::make_shared<ast::Node>("compound_statement", $1->get_left(), $3->get_right());
			$$->children.emplace_back($2);
		}
	| '{' declaration_list '}'	{
			$$ = std::make_shared<ast::Node>("compound_statement", $1->get_left(), $3->get_right());
			$$->children.emplace_back($2);
		}
	| '{' declaration_list statement_list '}'	{
			$$ = std::make_shared<ast::Node>("compound_statement", $1->get_left(), $4->get_right());
			$$->children.emplace_back($2);
			$$->children.emplace_back($3);
		}
	;

declaration_list
	: declaration	{
	  		$$ = std::make_shared<ast::Node>("declaration_list", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
	  }
	| declaration_list declaration	{
	  		$$ = $1;
			$$->children.emplace_back($2);
	  }
	;

statement_list
	: statement	{
			$$ = std::make_shared<ast::Node>("statement_list", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
		}
	| statement_list statement	{
	  		 $$ = $1;
			 $1->children.emplace_back($2);
	  	}
	;

expression_statement
	: ';'	{
	  	$$ = std::make_shared<ast::Node>("expression_statement", $1->get_left(), $1->get_right());
	  }
	| expression ';'	{
	  	$$ = $1;
	  }
	;

selection_statement
	: IF '(' expression ')' statement %prec IFX	{
	     	 $$ = std::make_shared<ast::Node>("if_statement", $1->get_left(), $5->get_right());
		 $$->children.emplace_back($3);
		 $$->children.emplace_back($5);
	  }
	| IF '(' expression ')' statement ELSE statement	{
	     	 $$ = std::make_shared<ast::Node>("if_else_statement", $1->get_left(), $7->get_right());
		 $$->children.emplace_back($3);
		 $$->children.emplace_back($5);
		 $$->children.emplace_back($7);
	  }
	| SWITCH '(' expression ')' statement
	;

iteration_statement
	: WHILE '(' expression ')' statement	{
	  	    	$$ = std::make_shared<ast::Node>("while_statement", $1->get_left(), $5->get_right());
			$$->children.emplace_back($3);
			$$->children.emplace_back($5);
	  }
	| DO statement WHILE '(' expression ')' ';'	{
	     	       $$ = std::make_shared<ast::Node>("do_statement", $1->get_left(), $7->get_right());
		       $$->children.emplace_back($2);
		       $$->children.emplace_back($5);
	  }
	| FOR '(' expression_statement expression_statement ')' statement	{
	      	  	$$ = std::make_shared<ast::Node>("for_statement", $1->get_left(), $6->get_right());
			$$->children.emplace_back($3);
			$$->children.emplace_back($4);
			$$->children.emplace_back($6);
	  }
	| FOR '(' expression_statement expression_statement expression ')' statement	{
	      	  	$$ = std::make_shared<ast::Node>("for_statement", $1->get_left(), $7->get_right());
			$$->children.emplace_back($3);
			$$->children.emplace_back($4);
			$$->children.emplace_back($5);
			$$->children.emplace_back($7);
	  }
	;

jump_statement
	: CONTINUE ';'	{
	  	   	$$ = $1;
	  	}
	| BREAK ';'	{
	  		$$ = $1;
	  	}
	| RETURN ';'	{
	  	 	$$ = $1;
			$$->type = "return_only";
	  	}
	| RETURN expression ';'	{
	  	 	$$ = $1;
			$$->type = "return_expr";
			$$->set_right($2->get_right());
			$$->children.emplace_back($2);
		}
	;

translation_unit
	: external_declaration	{
			$$ = std::make_shared<ast::Node>("translation_unit", $1->get_left(), $1->get_right());
			$$->children.emplace_back($1);
		}
	| translation_unit external_declaration	{
	  		$$ = $1;
			$$->set_right($2->get_right());
			$$->children.emplace_back($2);
	  	}
	;

external_declaration
	: function_definition	{
			$$ = $1;
		}
	| declaration	{
	  		$$ = $1;
		}
	;

function_definition
	: declaration_specifiers declarator compound_statement	{
			$$ = std::make_shared<ast::Node>("function_definition", $1->get_left(), $3->get_right());
			$$->children.emplace_back($1);
			$$->children.emplace_back($2);
			$$->children.emplace_back($3);
		}
	;
%%

void yyerror(const char *s)
{
	printf("%s\n", s);
}
